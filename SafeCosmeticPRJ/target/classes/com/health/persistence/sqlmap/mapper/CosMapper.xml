<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.health.persistence.mapper.CosMapper">

	<!-- 화장품등록 -->
	<insert id="insertCos" parameterType="cosmeticDTO">
	INSERT INTO COSMETIC
		(
		COS_NO, COS_NAME, COS_TYPE, PRICE, BRAND, LIKE_COUNT, IMG_NAME, IMG_PATH, THUMB_NAME, THUMB_PATH
		)
		VALUES(
		(SELECT IFNULL(MAX(COS.COS_NO),10000000)+1 FROM COSMETIC COS), #{cos_name},
		#{cos_type}, #{price}, #{brand}, '00000000',
		 #{img_name}, #{img_path}, #{thumb_name}, #{thumb_path}
		)
	</insert>
	<!-- 화장품등록 - 성분목록 -->
	<select id="CosIng" resultType="ingDTO">
		SELECT ING_NAME
		FROM INGREDIENT
		ORDER BY ING_NAME ASC
	</select>
	<!-- 화장품등록 - 브랜드목록 -->
	<select id="CosBrand" resultType="cosmeticDTO">
		SELECT BRAND
		FROM COSMETIC
		ORDER BY BRAND ASC
	</select>
	<!-- 화장품목록 -->
	<select id="getCosList" resultType="cosmeticDTO">
		SELECT COS_NO, COS_NAME, COS_TYPE, PRICE, BRAND, LIKE_COUNT
		FROM COSMETIC
		ORDER BY COS_TYPE ASC
		LIMIT #{0}, #{1}
	</select>
	<!-- 페이징 및 전체 레코드 갯수 조회 -->
	<select id="writeGetCount" resultType="int">
		SELECT COUNT(*)
		FROM COSMETIC
	</select>
	<!-- 화장품상세 -->
	<select parameterType="String" id="getcosDetail" resultType="cosmeticDTO">
		SELECT *  
		FROM COSMETIC
		WHERE COS_NO = #{cos_no}
	</select>
	<!-- 화장품상세 - 성분목록 -->
	<select parameterType="String" id="getcosDetailIng" resultType="ingDTO">
		SELECT DISTINCT ING.*  
		FROM COSMETIC CO, INGREDIENT ING, CODE CD
		WHERE CO.COS_NO = #{cos_no} AND CD.COS_NO = #{cos_no} AND ING.ING_NO = CD.ING_NO
	</select>
	<!-- 화장품수정 -->
	<update id="updateCos" parameterType="cosmeticDTO">
		UPDATE COSMETIC 
		SET  IMG_NAME = #{img_name}, COS_NAME = #{cos_name}, COS_TYPE = #{cos_type}, PRICE = #{price}, BRAND = #{brand},
		 IMG_PATH = #{img_path}, THUMB_NAME = #{thumb_name}, THUMB_PATH = #{thumb_path},
		  ORI_IMG_NAME = #{ori_img_name}
		WHERE COS_NO = #{cos_no}
	</update>
	<!-- 화장품삭제 -->
	<delete parameterType="cosmeticDTO" id="DeleteCos">
		DELETE FROM COSMETIC 
		WHERE COS_NO = #{cos_no}
	</delete>
	<!-- 좋아요목록(화장품상세)  -->
	<select id="getLikeList" parameterType="likeDTO" resultType="likeDTO">
	   SELECT LIKE_NO, USER_NO, COS_NO, REG_DT, COS_NAME, PRICE, BRAND
	   FROM LIKE_COSMETIC
	   WHERE COS_NO = #{cos_no} AND USER_NO = #{user_no}
	</select>
	<!-- 브랜드명으로 검색 -->
	<select id="getBrandSearch" parameterType="cosmeticDTO" resultType="cosmeticDTO">
		SELECT COS_NO, COS_NAME, PRICE, BRAND, IMG_NAME
		FROM COSMETIC
		WHERE BRAND LIKE CONCAT('%', #{0}, '%')
		ORDER BY COS_NO DESC
		LIMIT #{1}, #{2}
	</select>
	<!-- 브랜드명 자동완성 -->
	<select id="getBrandAuto" parameterType="cosmeticDTO" resultType="cosmeticDTO">
		SELECT DISTINCT BRAND
		FROM COSMETIC
		WHERE BRAND LIKE CONCAT('%', #{search}, '%')
	</select>
	<!-- 완전체 성분으로 검색 -->
	<select id="getIngSearch" parameterType="cosmeticDTO" resultType="cosmeticDTO">
		SELECT DISTINCT CO.COS_NO, CO.COS_NAME, CO.PRICE, CO.BRAND, CO.IMG_NAME
		FROM COSMETIC CO, INGREDIENT ING
		WHERE (ING.ING_NAME LIKE CONCAT('%', #{good}, '%') AND ING.ING_NAME NOT LIKE CONCAT('%', #{bad}, '%') AND COS_TYPE LIKE CONCAT('%', #{cos_type}, '%'))
		ORDER BY COS_NO DESC
	</select>
	<!--좋은성분제외 검색 -->
	<select id="getWithoutGood" parameterType="cosmeticDTO" resultType="cosmeticDTO">
		SELECT DISTINCT CO.COS_NO, CO.COS_NAME, CO.PRICE, CO.BRAND, CO.IMG_NAME
		FROM COSMETIC CO, INGREDIENT ING 
		WHERE (ING.ING_NAME NOT LIKE CONCAT('%', #{bad}, '%') AND CO.COS_TYPE LIKE CONCAT('%', #{cos_type}, '%'))
		ORDER BY COS_NO DESC
	</select>
	<!-- 피할성분제외 검색 -->
	<select id="getWithoutBad" parameterType="cosmeticDTO" resultType="cosmeticDTO">
		SELECT DISTINCT CO.COS_NO, CO.COS_NAME, CO.PRICE, CO.BRAND, CO.IMG_NAME
		FROM COSMETIC CO, INGREDIENT ING
		WHERE (ING.ING_NAME LIKE CONCAT('%', #{0}, '%') AND CO.COS_TYPE LIKE #{1})
		ORDER BY COS_NO DESC
		LIMIT #{2}, #{3}
	</select>
	<!--화장품타입제외 검색 -->
	<select id="getWithoutCosType" parameterType="cosmeticDTO" resultType="cosmeticDTO">
		SELECT DISTINCT CO.COS_NO, CO.COS_NAME, CO.PRICE, CO.BRAND, CO.IMG_NAME
		FROM COSMETIC CO, INGREDIENT ING
		WHERE (ING.ING_NAME LIKE CONCAT('%', #{good}, '%') AND ING.ING_NAME NOT LIKE CONCAT('%', #{bad}, '%'))
		ORDER BY COS_NO DESC
	</select>
	<!-- 좋은성분명 자동완성 -->
	<select id="getIngGoodAuto" parameterType="ingDTO" resultType="ingDTO">
		SELECT DISTINCT ING_NAME
		FROM INGREDIENT ING
		WHERE ING_NAME LIKE CONCAT('%', #{good}, '%')
	</select>
	<!-- 임산부추천화장품 -->
	<select id="getPregnantList" resultType="cosmeticDTO">
		SELECT DISTINCT CO.COS_NO, CO.COS_NAME, CO.PRICE, CO.BRAND, CO.IMG_NAME, ING.ING_NAME
		FROM COSMETIC CO, INGREDIENT ING, CODE CD
		WHERE ING.DANGER_CHECK = 'b' AND CO.COS_NO = CD.COS_NO
		LIMIT #{0}, #{1}
	</select>
	<!-- 임산부 페이징 및 전체 레코드 갯수 조회 -->
	<select id="writePregGetCount" resultType="int">
		SELECT COUNT(DISTINCT CO.COS_NAME)
		FROM COSMETIC CO, INGREDIENT ING, CODE CD
		WHERE ING.DANGER_CHECK = 'b' AND CO.COS_NO = CD.COS_NO
	</select>
	<!-- 영유아추천화장품 -->
	<select id="getBabyList" resultType="cosmeticDTO">
		SELECT DISTINCT CO.COS_NO, CO.COS_NAME, CO.PRICE, CO.BRAND, CO.IMG_NAME
		FROM COSMETIC CO, INGREDIENT ING, CODE CD
		WHERE ING.DANGER_CHECK = 'c' AND CO.COS_NO = CD.COS_NO
		LIMIT #{0}, #{1}
	</select>
	<!-- 영유아 페이징 및 전체 레코드 갯수 조회 -->
	<select id="writeBabyGetCount" resultType="int">
		SELECT COUNT(DISTINCT CO.COS_NAME)
		FROM COSMETIC CO, INGREDIENT ING, CODE CD
		WHERE ING.DANGER_CHECK = 'c' AND CO.COS_NO = CD.COS_NO
	</select>
	<!-- 알레르기추천화장품 -->
	<select id="getAllergyList" resultType="cosmeticDTO">
		SELECT DISTINCT CO.COS_NO, CO.COS_NAME, CO.PRICE, CO.BRAND, CO.IMG_NAME
		FROM COSMETIC CO, INGREDIENT ING, CODE CD
		WHERE ING.DANGER_CHECK = 'd' AND CO.COS_NO = CD.COS_NO
		LIMIT #{0}, #{1}
	</select>
	<!-- 알레르기 페이징 및 전체 레코드 갯수 조회 -->
	<select id="writeAllergyGetCount" resultType="int">
		SELECT COUNT(DISTINCT CO.COS_NAME)
		FROM COSMETIC CO, INGREDIENT ING, CODE CD
		WHERE ING.DANGER_CHECK = 'd' AND CO.COS_NO = CD.COS_NO
	</select>
	<!--코드테이블 ing_no 등록-->
	<insert id="codeInsert" >
		INSERT INTO CODE(COS_NO, ING_NO)
   		SELECT DISTINCT COSMETIC.COS_NO, INGREDIENT.ING_NO
     	FROM COSMETIC, INGREDIENT
   		WHERE INGREDIENT.ING_NAME = #{0} AND COSMETIC.COS_NAME = #{1}
	</insert>
	<!-- 코드테이블 삭제 -->
	<delete parameterType="String" id="codeDelete">
		DELETE FROM CODE 
		WHERE COS_NO = #{cos_no}
	</delete>
	<!-- 페이징 및 전체 레코드 갯수 조회 -->
	<select id="writeBrandGetCount" resultType="int">
		SELECT COUNT(*)
		FROM COSMETIC
		WHERE BRAND LIKE CONCAT('%', #{0}, '%')
		ORDER BY COS_NO DESC
	</select>
		<!-- 페이징 및 전체 레코드 갯수 조회 -->
	<select id="writeIngGetCount" resultType="int">
		SELECT COUNT(DISTINCT CO.COS_NAME)
		FROM COSMETIC CO, INGREDIENT ING
		WHERE (ING.ING_NAME LIKE CONCAT('%', #{0}, '%') AND CO.COS_TYPE LIKE #{1})
	</select>
</mapper>
